- hosts: all:!n72
  become: true
  tasks:
  - name: Reboot immediately if there was a change.
    shell: "sleep 5 && reboot"
    async: 1
    poll: 0
    #when: task_result is changed

  - name: Wait for the reboot to complete if there was a change.
    wait_for_connection:
      sleep: 60
      delay: 60
      timeout: 300
    #when: task_result is changed

- hosts: manager
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_manager_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_operational
      with_items: "{{ play_hosts }}"
      when: "'active' in swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_manager_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_manager_bootstrap
      with_items: "{{ play_hosts }}"
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true

- hosts: worker
  become: true
  tasks:
    - name: determine swarm status
      shell: >
        docker info | egrep '^Swarm: ' | cut -d ' ' -f2
      register: swarm_status

    - name: create swarm_worker_operational group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_operational
      with_items: "{{ play_hosts }}"
      when: "'active' in swarm_status.stdout_lines"
      run_once: true

    - name: create swarm_worker_bootstrap group
      add_host:
        hostname: "{{ item }}"
        groups: swarm_worker_bootstrap
      with_items: "{{ play_hosts }}"
      when: "'active' not in swarm_status.stdout_lines"
      run_once: true

- hosts: swarm_manager_bootstrap[0]
  become: true
  tasks:
    - name: initialize swarm cluster
      shell: >
        docker swarm init
        --advertise-addr={{ swarm_iface | default('eth1') }}:2377
      when: "'swarm_manager_operational' not in groups"
      register: bootstrap_first_node

    - name: add initialized host to swarm_manager_operational group
      add_host:
        hostname: "{{ play_hosts[0] }}"
        groups: swarm_manager_operational
      when: bootstrap_first_node.changed

- hosts: swarm_manager_operational[0]
  become: true
  vars:
    iface: "{{ swarm_iface | default('eth1') }}"
  tasks:
    - name: retrieve swarm manager token
      shell: docker swarm join-token -q manager
      register: swarm_manager_token

    - name: retrieve swarm worker token
      shell: docker swarm join-token -q worker
      register: swarm_worker_token

    - name: populate list of manager ips
      add_host:
        hostname: "{{ hostvars[item]['ansible_' + iface]['ipv4']['address'] }}"
        groups: swarm_manager_ips
      with_items: "{{ play_hosts }}"

- hosts: swarm_manager_bootstrap:!swarm_manager_operational
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_manager_token']['stdout'] }}"
  tasks:
    - name: join manager nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('eth1') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: swarm_worker_bootstrap
  become: true
  vars:
    token: "{{ hostvars[groups['swarm_manager_operational'][0]]['swarm_worker_token']['stdout'] }}"
  tasks:
    - name: join worker nodes to cluster
      shell: >
        docker swarm join
        --advertise-addr={{ swarm_iface | default('eth1') }}:2377
        --token={{ token }}
        {{ groups['swarm_manager_ips'][0] }}:2377

- hosts: manager
  become: true
  tasks:
    - name: Download portainer-agent-stack.yml
      get_url:
        url: https://downloads.portainer.io/portainer-agent-stack.yml
        dest: /tmp/portainer-agent-stack.yml
        validate_certs: no

    - name: install python-pip
      yum:
        name: python-pip
        state: present
        update_cache: yes
        
    - name : pip install jsondiff
      pip:
        name: jsondiff

    - name : pip install pyaml
      pip:
        name: pyaml

    - name: Deploy stack portainer
      docker_stack:
        state: present
        name: portainer
        compose:
          - /tmp/portainer-agent-stack.yml